# -*- coding: utf-8 -*-
"""Task07_2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13zP7djRTBeG5tsTNq-mV-TGtIeDmqV7W

**Task 07: Querying RDF(s)**
"""

#

# !pip install rdflib
import urllib.request
url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/master/Assignment4/course_materials"

#

from validation import Report

#

# First let's read the RDF file

#

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
# Do not change the name of the variables
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.parse(github_storage+"/rdf/data06.ttl", format="TTL")
report = Report()

#

# **TASK 7.1a: For all classes, list each classURI. If the class belogs to another class, then list its superclass.**
# **Do the exercise in RDFLib returning a list of Tuples: (class, superclass) called "result". If a class does not have a super class, then return None as the superclass**

#

# ===== TASK 7.1a (RDFLib) =====
from rdflib.namespace import RDFS

result = []

# 1) Recolectar TODAS las clases que aparecen explícitamente o como sujeto de subClassOf
classes = set(g.subjects(RDF.type, RDFS.Class)) | set(g.subjects(RDFS.subClassOf, None))

# 2) Para cada clase, añadir tuplas (c, sc) con cada superclase; si no hay, (c, None)
for c in classes:
    supercs = list(g.objects(c, RDFS.subClassOf))
    if supercs:
        for sc in supercs:
            result.append((c, sc))
    else:
        result.append((c, None))

# Visualizar
for r_ in result:
    print(r_)

#

## Validation: Do not remove
report.validate_07_1a(result)

#

# **TASK 7.1b: Repeat the same exercise in SPARQL, returning the variables ?c (class) and ?sc (superclass)**

#

# ===== TASK 7.1b (SPARQL) =====
query =  """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?c ?sc WHERE {
  {
    ?c rdf:type rdfs:Class .
    OPTIONAL { ?c rdfs:subClassOf ?sc . }
  }
  UNION
  {
    ?c rdfs:subClassOf ?sc .
  }
}

"""

for r in g.query(query):
  print(r.c, r.sc)

#

## Validation: Do not remove
report.validate_07_1b(query,g)

#

# **TASK 7.2a: List all individuals of "Person" with RDFLib (remember the subClasses). Return the individual URIs in a list called "individuals"**

#

# ===== TASK 7.2a (RDFLib) =====
ns = Namespace("http://oeg.fi.upm.es/def/people#")

# Obtener subclases transitivas de Person (incluyendo Person)
subclasses = set([ns.Person])
fringe = [ns.Person]
while fringe:
    cur = fringe.pop()
    for sc in g.subjects(RDFS.subClassOf, cur):
        if sc not in subclasses:
            subclasses.add(sc)
            fringe.append(sc)

# Obtener individuos cuyo tipo sea Person o cualquiera de sus subclases
individuals = []
for klass in subclasses:
    for ind in g.subjects(RDF.type, klass):
        if ind not in individuals:
            individuals.append(ind)

# Visualizar
for i in individuals:
  print(i)

#

# validation. Do not remove
report.validate_07_02a(individuals)

#

# **TASK 7.2b: Repeat the same exercise in SPARQL, returning the individual URIs in a variable ?ind**

#

# ===== TASK 7.2b (SPARQL) =====
query =  """
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns:   <http://oeg.fi.upm.es/def/people#>

SELECT ?ind WHERE {
  ?ind rdf:type ?c .
  ?c rdfs:subClassOf* ns:Person .
}
"""

for r in g.query(query):
  print(r.ind)
# Visualizar los resultados

#

## Validation: Do not remove
report.validate_07_02b(g, query)

#

# **TASK 7.3:  List the name and type of those who know Rocky (in SPARQL only). Use name and type as variables in the query**

#

# ===== TASK 7.3 (SPARQL) =====
query = """
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ontology: <http://oeg.fi.upm.es/def/people#>
PREFIX person:   <http://oeg.fi.upm.es/resource/person/>

SELECT ?name ?type WHERE {
  ?x ontology:knows person:Rocky .
  ?x ontology:hasName ?name .
  ?x rdf:type ?type .
}
"""

# Visualizar resultados
for r in g.query(query):
  print(r.name, r.type)


#

## Validation: Do not remove
report.validate_07_03(g, query)



# **Task 7.4: List the name of those entities who have a colleague with a dog, or that have a collegue who has a colleague who has a dog (in SPARQL). Return the results in a variable called name**

#

# ===== TASK 7.4 (SPARQL) =====
query =  """SELECT DISTINCT ?name WHERE {
  PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
  PREFIX ontology: <http://oeg.fi.upm.es/def/people#>

  {
    
    ?x ontology:hasColleague ?c .
    ?c ontology:hasPet ?d .
    ?d rdf:type ontology:Dog .
  }
  UNION
  {
    
    ?x ontology:hasColleague ?c1 .
    ?c1 ontology:hasColleague ?c2 .
    ?c2 ontology:hasPet ?d2 .
    ?d2 rdf:type ontology:Dog .
  }

  
  ?x ontology:hasName ?name .
}"""

for r in g.query(query):
  print(r.name)

# Visualizar los resultados

#

## Validation: Do not remove
report.validate_07_04(g,query)
report.save_report("_Task_07")